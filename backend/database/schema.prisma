datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(cuid())
  email           String?
  emailVerified   Boolean?
  password        String?
  robloxId        String?
  robloxCookie    String?
  robloxCreatedAt DateTime?
  googleId        String?
  googleEmail     String?
  discordId       String?
  username        String?
  avatar          String?
  rank            String   @default("user")
  balance         Float    @default(0)
  xp              Float    @default(0)
  vaultAmount     Float    @default(0)
  vaultExpireAt   DateTime?
  statsBet        Float    @default(0)
  statsWon        Float    @default(0)
  statsDeposit    Float    @default(0)
  statsWithdraw   Float    @default(0)
  slotsMascot     Boolean  @default(false)
  leaderboardPoints Float  @default(0)
  limitsBetToWithdraw Float @default(0)
  limitsBetToRain     Float @default(0)
  limitsBlockAffiliate Boolean @default(false)
  limitsBlockRain      Boolean @default(false)
  limitsBlockTip       Boolean @default(false)
  limitsLimitTip       Float   @default(0)
  limitsBlockSponsor   Boolean @default(false)
  limitsBlockLeaderboard Boolean @default(false)
  rakebackEarned       Float   @default(0)
  rakebackAvailable    Float   @default(0)
  affiliatesCode       String?
  affiliatesReferred   Int     @default(0)
  affiliatesBet        Float   @default(0)
  affiliatesDeposit    Float   @default(0)
  affiliatesEarned     Float   @default(0)
  affiliatesAvailable  Float   @default(0)
  affiliatesGenerated  Float   @default(0)
  referrerId           String?
  referrer             User?    @relation("UserReferrer", fields: [referrerId], references: [id])
  referredAddress      String?
  referredAt           DateTime?
  redeemedCode         String?
  fairClientSeed       String?
  anonymous            Boolean  @default(false)
  proxy                String?
  ips                  Json[]
  muteExpire           DateTime?
  muteReason           String?
  banExpire            DateTime?
  banReason            String?
  verifiedAt           DateTime?
  updatedAt            DateTime @default(now())
  createdAt            DateTime @default(now())

  referredUsers        User[]   @relation("UserReferrer")
  leaderboards         LeaderboardWinner[]
  balanceTransactions  BalanceTransaction[]
}

model Leaderboard {
  id        String   @id @default(cuid())
  winners   LeaderboardWinner[]
  duration  Int
  type      String
  state     String
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
}

model LeaderboardWinner {
  id            String      @id @default(cuid())
  prize         Float
  points        Float
  userId        String
  leaderboardId String
  user          User        @relation(fields: [userId], references: [id])
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
}

model BalanceTransaction {
  id        String   @id @default(cuid())
  amount    Float
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  state     String
  createdAt DateTime @default(now())
}
